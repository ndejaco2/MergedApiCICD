type Author {
    id: ID!
    name: String!
    bio: String
    contactEmail: String
    nationality: String
}

type AuthorConnection {
    items: [Author]
    nextToken: String
}

type Book {
    id: ID!
    author: Author
}

input CreateAuthorInput {
    name: String!
    bio: String
    contactEmail: String
    nationality: String
}

input DeleteAuthorInput {
    id: ID!
}

type Review {
    id: ID!
    author: Author
}

input TableAuthorFilterInput {
    id: TableIDFilterInput
    name: TableStringFilterInput
    bio: TableStringFilterInput
    contactEmail: TableStringFilterInput
    nationality: TableStringFilterInput
}

input TableBooleanFilterInput {
    ne: Boolean
    eq: Boolean
}

input TableFloatFilterInput {
    ne: Float
    eq: Float
    le: Float
    lt: Float
    ge: Float
    gt: Float
    contains: Float
    notContains: Float
    between: [Float]
}

input TableIDFilterInput {
    ne: ID
    eq: ID
    le: ID
    lt: ID
    ge: ID
    gt: ID
    contains: ID
    notContains: ID
    between: [ID]
    beginsWith: ID
}

input TableIntFilterInput {
    ne: Int
    eq: Int
    le: Int
    lt: Int
    ge: Int
    gt: Int
    contains: Int
    notContains: Int
    between: [Int]
}

input TableStringFilterInput {
    ne: String
    eq: String
    le: String
    lt: String
    ge: String
    gt: String
    contains: String
    notContains: String
    between: [String]
    beginsWith: String
}

input UpdateAuthorInput {
    id: ID!
    name: String
    bio: String
    contactEmail: String
    nationality: String
}

type Mutation {
    createAuthor(input: CreateAuthorInput!): Author
    updateAuthor(input: UpdateAuthorInput!): Author
    deleteAuthor(input: DeleteAuthorInput!): Author
}

type Query {
    getAuthor(id: ID!): Author
    listAuthors(filter: TableAuthorFilterInput, limit: Int, nextToken: String): AuthorConnection
}

type Subscription {
    onCreateAuthor(
        id: ID,
        name: String,
        bio: String,
        contactEmail: String,
        nationality: String
    ): Author
    @aws_subscribe(mutations: ["createAuthor"])
    onUpdateAuthor(
        id: ID,
        name: String,
        bio: String,
        contactEmail: String,
        nationality: String
    ): Author
    @aws_subscribe(mutations: ["updateAuthor"])
    onDeleteAuthor(
        id: ID,
        name: String,
        bio: String,
        contactEmail: String,
        nationality: String
    ): Author
    @aws_subscribe(mutations: ["deleteAuthor"])
}